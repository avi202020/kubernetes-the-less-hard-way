---
- name: Install cfssl deps
  shell: '{{ item }}'
  loop:
    - go get -u github.com/cloudflare/cfssl/cmd/cfssl
    - go get -u github.com/cloudflare/cfssl/cmd/cfssljson

- name: Template CSR files
  template:
    src: '{{ item.src }}'
    dest: '../ssl/csr/{{ item.dest }}'
  loop:
    - { src: 'ca-csr.json.j2', dest: 'ca-csr.json' }
    - { src: 'admin-csr.json.j2', dest: 'admin-csr.json' }
    - { src: 'kube-controller-manager-csr.json.j2', dest: 'kube-controller-manager-csr.json' }
    - { src: 'kube-proxy-csr.json.j2', dest: 'kube-proxy-csr.json' }
    - { src: 'kube-scheduler-csr.json.j2', dest: 'kube-scheduler-csr.json' }
    - { src: 'kubernetes-csr.json.j2', dest: 'kubernetes-csr.json' }
    - { src: 'service-account-csr.json.j2', dest: 'service-account-csr.json' }

- name: Template CSR files for workers
  template:
    src: worker-csr.json.j2
    dest: '../ssl/csr/{{ hostvars[item].ansible_hostname }}.json'
  loop: "{{ groups['workers'] }}"

- name: Generate Admin Certificate
  shell: |
    cfssl gencert -initca ca-csr.json | cfssljson -bare ca && \
    cfssl gencert \
      -ca=ca.pem \
      -ca-key=ca-key.pem \
      -config=ca-config.json \
      -profile=kubernetes \
      ../ssl/csr/admin-csr.json | cfssljson -bare ../ssl/admin

- name: Generate Kubelet Client Certificate
  vars:
    hostname: "{{ hostvars[item].ansible_hostname }}"
    internal_ip: "{{ hostvars[item].ansible_default_ipv4.address }}"
  shell: |
    cfssl gencert \
      -ca=ca.pem \
      -ca-key=ca-key.pem \
      -config=ca-config.json \
      -hostname={{ hostname }},{{ internal_ip }},{{ external_ip }} \
      -profile=kubernetes \
      ../ssl/csr/{{ hostname }}.json | cfssljson -bare ../ssl/{{ hostname }}
  loop: "{{ groups['workers'] }}"

- name: Generate Controller Manager Certificate
  shell: |
    cfssl gencert \
      -ca=ca.pem \
      -ca-key=ca-key.pem \
      -config=ca-config.json \
      -profile=kubernetes \
      ../ssl/csr/kube-controller-manager-csr.json | cfssljson -bare ../ssl/kube-controller-manager

- name: Generate Kube Proxy Client Certificate
  shell: |
    cfssl gencert \
      -ca=ca.pem \
      -ca-key=ca-key.pem \
      -config=ca-config.json \
      -profile=kubernetes \
      ../ssl/csr/kube-proxy-csr.json | cfssljson -bare ../ssl/kube-proxy

- name: Generate Scheduler Client Certificate
  shell: |
    cfssl gencert \
      -ca=ca.pem \
      -ca-key=ca-key.pem \
      -config=ca-config.json \
      -profile=kubernetes \
      ../ssl/csr/kube-scheduler-csr.json | cfssljson -bare ../ssl/kube-scheduler

- name: Service Account Key Pair
  shell: |
    cfssl gencert \
      -ca=ca.pem \
      -ca-key=ca-key.pem \
      -config=ca-config.json \
      -profile=kubernetes \
      ../ssl/csr/service-account-csr.json | cfssljson -bare ../ssl/service-account

- name: Generate API Server Certificate
  vars:
    kubernetes_hostnames: "kubernetes,kubernetes.default,kubernetes.default.svc,kubernetes.default.svc.cluster,kubernetes.svc.cluster.local"
    hostname: "{{ hostvars[item].ansible_hostname }}"
    controllers_ips: "{{ groups['controllers'] | map('extract', hostvars, ['ansible_facts', 'default_ipv4', 'address']) | join(',') }}"
  shell: |
    cfssl gencert \
      -ca=ca.pem \
      -ca-key=ca-key.pem \
      -config=ca-config.json \
      -hostname=10.32.0.1,{{ controllers_ips }},{{ external_ip }},127.0.0.1,{{ kubernetes_hostnames }} \
      -profile=kubernetes \
      ../ssl/csr/kubernetes-csr.json | cfssljson -bare ../ssl/kubernetes
